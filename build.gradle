plugins {
    id 'fabric-loom' version '0.9-SNAPSHOT'
    id 'maven-publish'
}

archivesBaseName = project.archives_base_name
version = project.base_version + project.version_suffix
group = project.maven_group

repositories {
    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods because
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html
    // for more information about repositories.

    // Parchment Mappings:
    maven {
        name = 'ParchmentMC'
        url = 'https://maven.parchmentmc.org'
    }
    mavenCentral()

    // Repositiories for MaLaLib
    maven {
        url 'https://masa.dy.fi/maven'
    }
    maven {
        url 'https://maven.terraformersmc.com/releases/'
    }
}

loom {
    accessWidenerPath = file("src/main/resources/logmod.accesswidener")
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    //	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // MojMaps + Parchment Mappings:
    mappings loom.layered() {
        officialMojangMappings()
        parchment("org.parchmentmc.data:${project.parchment_mappings}")
    }

    // Apache Commons Math 3
    implementation 'org.apache.commons:commons-math3:3.6.1'

    // Malilib
    modImplementation(include(files("libs/malilib-fabric-${project.minecraft_version}-${project.malilib_version}.jar")))

    // Fabric API. This is technically optional, but you probably want it anyway.
    // modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    modImplementation(include("net.fabricmc.fabric-api:fabric-api-base:${project.fabric_api_base_version}"))
    modImplementation(include("net.fabricmc.fabric-api:fabric-resource-loader-v0:${project.fabric_resource_loader_version}"))
    modImplementation(include("net.fabricmc.fabric-api:fabric-command-api-v1:${project.fabric_command_api_version}"))

    // PSA: Some older mods, compiled on Loom 0.2.1, might have outdated Maven POMs.
    // You may need to force-disable transitiveness on them.
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"

    def targetVersion = 8

    it.sourceCompatibility = JavaVersion.toVersion(targetVersion)
    it.targetCompatibility = JavaVersion.toVersion(targetVersion)

    // The Minecraft launcher currently installs Java 8 for users, so your mod probably wants to target Java 8 too
    // JDK 9 introduced a new way of specifying this that will make sure no newer classes or methods are used.
    // We'll use that if it's available, but otherwise we'll use the older option.
    if (JavaVersion.current().isJava9Compatible()) {
        it.options.release = targetVersion
    }
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {}
    from("README.md") {}
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            // add all the jars that should be included when publishing to maven
            artifact(remapJar) {
                builtBy remapJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.

        maven {
            name = "GitHubPackages"
            url = "https://maven.pkg.github.com/logwet/${archivesBaseName}"
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
}
